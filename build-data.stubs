#!/usr/local/bin/perl

# THIS SCRIPT IS NOT INTENDED FOR END USERS OR FOR PEOPLE INSTALLING
# THE MODULES, BUT FOR THE AUTHOR'S USE WHEN UPDATING THE DATA FROM OFCOM'S
# PUBLISHED DATA.

use strict;
use warnings;
use Data::Dumper; local $Data::Dumper::Indent = 0;

use XML::XPath;
my $xml = XML::XPath->new(filename => 'libphonenumber/resources/PhoneNumberMetaData.xml');
my @territories = $xml->find('/phoneNumberMetadata/territories/territory')->get_nodelist();

open(my $manifest_fh, 'MANIFEST') || die("Can't read MANIFEST\n");
my @manifest_files = grep { /./ } <$manifest_fh>;
close($manifest_fh);
open($manifest_fh, '>', 'MANIFEST') || die("Can't write MANIFEST\n");
print $manifest_fh "$_" foreach( grep { $_ !~ m{^(t/)?lib/Number/Phone/StubCountry/} } @manifest_files);

mkdir('lib/Number/Phone/StubCountry');
mkdir('t/lib');
mkdir('t/lib/Number');
mkdir('t/lib/Number/Phone');
my $dir = 'lib/Number/Phone/StubCountry';

TERRITORY: foreach my $territory (@territories) {
  my $IDD_country_code = ''.$territory->find('@countryCode');
  # next if($IDD_country_code eq '1'); # no point stubbing NANP!

  my $ISO_country_code = ''.$territory->find('@id');
  if($ISO_country_code !~ /^..$/) {
    warn("skipping 'country' $ISO_country_code (+$IDD_country_code)\n");
    next TERRITORY;
  }
  # no need to create a stub for the UK, so use this for testing instead
  # $ISO_country_code = $ISO_country_code eq 'GB' ? 'MOCK' : $ISO_country_code;
  # my $dir = ($ISO_country_code eq 'MOCK' ? 't/' : '').'lib/Number/Phone/StubCountry';

  unlink "$dir/$ISO_country_code.pm"; # to clear out countries that no longer exist

  # next if($ISO_country_code =~ /^(IM|GG|JE)$/); # special cases in N::P

  open(my $module_fh, '>', "$dir/$ISO_country_code.pm")
    || die("Can't write $dir/$ISO_country_code.pm: $!\n");
  print $manifest_fh "$dir/$ISO_country_code.pm\n";
  print $module_fh preamble($ISO_country_code);

  my @number_formats = $territory->find('availableFormats/numberFormat')->get_nodelist();

  my @formatters = ();
  foreach my $number_format (@number_formats) {
    my $number_format_pattern = ''.$number_format->find('@pattern');
    # only interested in the last one,
    # see https://github.com/DrHyde/perl-modules-Number-Phone/issues/7
    my $leading_digit_pattern = ($number_format->find('leadingDigits')->get_nodelist())[-1];
    my $formatter = ''.$number_format->find('format');

    if($leading_digit_pattern) {
      ($leading_digit_pattern = $leading_digit_pattern->string_value()) =~ s/\s//g;
      push @formatters, {
        leading_digits => $leading_digit_pattern,
        pattern        => $number_format_pattern
      };
    }
  }

  print $module_fh 'my '.Data::Dumper->new([\@formatters], [qw(formatters)])->Dump()."\n";
  print $module_fh 'my '.Data::Dumper->new([{
                                             special_rate => join('|', map {
                                               (my $foo = '('.$territory->find("$_/nationalNumberPattern")->string_value().')')
                                                 =~ s/\s//g;
                                               $foo;
                                             } qw(sharedCost premiumRate uan)),
                                             map {
                                               (my $xpath = $_) =~ s/_(\w)/uc($1)/eg;
                                               (my $pattern = $territory->find("$xpath/nationalNumberPattern")->string_value())
                                                 =~ s/\s//g;
                                               ($_ => $pattern);
                                             } qw(fixed_line mobile pager voip toll_free personal_number)
                                           }], [qw(validators)])->Dump();
  my $codesfile = "libphonenumber/resources/geocoding/en/$IDD_country_code.txt";
  if(-e $codesfile) {
    open(LIBPHONENUMBERDATA, $codesfile) || die("Can't read $codesfile\n");
    my @lines = <LIBPHONENUMBERDATA>;
    print $module_fh 'sub areaname { my $self = shift; my $number = $self->{number}; my %map = (';
    foreach my $line (@lines) {
      chomp($line);
      next if($line =~ /^(#.*|\s+)?$/);
      my($prefix, $area) = split(/\|/, $line);
      $area = quotemeta($area);
      print $module_fh "$prefix => \"$area\",";
    }
    print $module_fh ');
      foreach my $prefix (map { substr($number, 0, $_) } reverse(1..length($number))) {
        return $map{"'.$IDD_country_code.'$prefix"} if exists($map{"'.$IDD_country_code.'$prefix"});
      }
      return undef;
    }';
  }
  print $module_fh <<EOCODE

sub new {
  my \$class = shift;
  my \$number = shift;
  \$number =~ s/(^\\+$IDD_country_code|\\D)//g;
  my \$self = bless({ number => \$number, formatters => \$formatters, validators => \$validators }, \$class);
  return \$self->is_valid() ? \$self : undef;
}

1;
EOCODE
  ;
}

# Copy GB to MOCK for testing.
  if (-e "$dir/GB.pm") {
    my $mock_dir = 't/lib/Number/Phone/StubCountry';
    mkdir $mock_dir;
    open my $in, '<',  "$dir/GB.pm" or die "Cannot open $dir/GB.pm: $!\n";
    open my $out, '>', "$mock_dir/MOCK.pm" or die "Cannot open $dir/MOCK.pm: $!\n";
    while (<$in>) {
        s/::GB/::MOCK/g;
        print $out $_;
    }
}

sub preamble {
  my $iso_code = shift;
  "# automatically generated file, don't edit\n\n".
  q{

# Copyright 2011 David Cantrell, derived from data from libphonenumber
# http://code.google.com/p/libphonenumber/
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
package Number::Phone::StubCountry::}.$iso_code.q{;
use base qw(Number::Phone::StubCountry);
  
use strict;
use warnings;
}.
  "our \$VERSION = 1.".join("", (gmtime())[5] + 1900, sprintf('%02d', (gmtime())[4] + 1), map { sprintf('%02d', $_) } (gmtime())[3, 2, 1, 0]).";\n\n";
}

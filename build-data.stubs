#!/usr/bin/env perl

# THIS SCRIPT IS NOT INTENDED FOR END USERS OR FOR PEOPLE INSTALLING
# THE MODULES, BUT FOR THE AUTHOR'S USE WHEN UPDATING THE DATA FROM OFCOM'S
# PUBLISHED DATA.

use strict;
use warnings;
use Data::Dumper; local $Data::Dumper::Indent = 2;

use lib 'lib';
use Number::Phone::NANP::Data;

$| = 1;

use XML::XPath;
my $xml = XML::XPath->new(filename => 'libphonenumber/resources/PhoneNumberMetadata.xml');
my @territories = $xml->find('/phoneNumberMetadata/territories/territory')->get_nodelist();

open(my $manifest_fh, 'MANIFEST') || die("Can't read MANIFEST\n");
my @manifest_files = grep { /./ } <$manifest_fh>;
close($manifest_fh);
open($manifest_fh, '>', 'MANIFEST') || die("Can't write MANIFEST\n");
print $manifest_fh "$_" foreach( grep { $_ !~ m{^lib/Number/Phone/StubCountry/} } @manifest_files);

mkdir('lib/Number/Phone/StubCountry');
mkdir('t/lib');
mkdir('t/lib/Number');
mkdir('t/lib/Number/Phone');
my $dir = 'lib/Number/Phone/StubCountry';

my @us_formats = formats_for($xml->find(
    '/phoneNumberMetadata/territories/territory[@id="US"]')->get_node(1)
);

my @gb_formats = formats_for($xml->find(
    '/phoneNumberMetadata/territories/territory[@id="GB"]')->get_node(1)
);

TERRITORY: foreach my $territory (@territories) {
  my $IDD_country_code = ''.$territory->find('@countryCode');
  my $national_code    = ''.$territory->find('@nationalPrefix');

  my $ISO_country_code = ''.$territory->find('@id');
  if($ISO_country_code !~ /^..$/) {
    warn("skipping 'country' $ISO_country_code (+$IDD_country_code)\n");
    next TERRITORY;
  }

  unlink "$dir/$ISO_country_code.pm"; # to clear out countries that no longer exist

  open(my $module_fh, '>:encoding(UTF-8)', "$dir/$ISO_country_code.pm")
    || die("Can't write $dir/$ISO_country_code.pm: $!\n");
  print $manifest_fh "$dir/$ISO_country_code.pm\n";
  print $module_fh preamble($ISO_country_code);

  my @formatters = formats_for($territory, $ISO_country_code);
  print $module_fh 'my '.Data::Dumper->new([\@formatters], [qw(formatters)])->Dump()."\n";
  my $validators = {
      specialrate => join('|', grep { $_ ne '()' } map {
          '('.$territory->find("$_/nationalNumberPattern")->string_value().')'
      } qw(sharedCost premiumRate uan)),
      map {
          (my $xpath = $_) =~ s/_(\w)/uc($1)/eg;
          ($_ => $territory->find("$xpath/nationalNumberPattern")->string_value());
      } qw(fixed_line mobile pager voip toll_free personal_number)
  };

  $validators->{geographic} = $validators->{fixed_line};
  if($IDD_country_code == 1) {
      # see if build-nanp detected dodgy data
      if(!exists($Number::Phone::NANP::Data::fixed_line_regexes{$ISO_country_code})) {
          $validators->{geographic} = '('.$validators->{fixed_line}.'|'.$validators->{mobile}.')';
          delete $validators->{fixed_line};
          delete $validators->{mobile};
      }
  }
  print $module_fh 'my '.Data::Dumper->new([$validators], [qw(validators)])->Dump();
  my $codesfile = "libphonenumber/resources/geocoding/en/$IDD_country_code.txt";
  if($IDD_country_code == 1) {
    print $module_fh "use Number::Phone::NANP::Data;\nsub areaname {\n";
    if($ISO_country_code !~ /^(US|CA|JM)$/) {
        # we have explicit tests for US and CA areaname, and use JM to
        # check it DTRT when there's no data
        print $module_fh "# uncoverable subroutine - no data for most NANP countries
                          # uncoverable statement\n";
    }
    print $module_fh "Number::Phone::NANP::Data::_areaname('1'.shift()->{number}); }\n";
  } elsif(-e $codesfile) {
    open(my $geocoding, '<:encoding(UTF-8)', $codesfile) || die("Can't read $codesfile\n");
    my @lines = <$geocoding>;
    print $module_fh "my %areanames = (\n";
    foreach my $line (@lines) {
      chomp($line);
      next if($line =~ /^(#.*|\s+)?$/);
      my($prefix, $area) = split(/\|/, $line);
      $area = quotemeta($area);
      print $module_fh "  $prefix => \"$area\",\n";
    }
    print $module_fh ');';
  }
  print $module_fh "
    sub new {
      my \$class = shift;
      my \$number = shift;
      \$number =~ s/(^\\+$IDD_country_code|\\D)//g;
      my \$self = bless({ number => \$number, formatters => \$formatters, validators => \$validators, ".
      (($IDD_country_code != 1 && -e $codesfile) ? 'areanames => \\%areanames' : '')
      ."}, \$class);
  ";

  if ($national_code ne '' && $IDD_country_code ne '1') {
    print $module_fh "
      return \$self if (\$self->is_valid());
      \$number =~ s/(^$national_code)//g;
      \$self = bless({ number => \$number, formatters => \$formatters, validators => \$validators, ".
      (($IDD_country_code != 1 && -e $codesfile) ? 'areanames => \\%areanames' : '')
      ."}, \$class);
    ";
  }
  print $module_fh "return \$self->is_valid() ? \$self : undef;\n";
  print $module_fh "}\n1;";
}

sub preamble {
  my $iso_code = shift;
  "# automatically generated file, don't edit\n\n".
  q{

# Copyright 2011 David Cantrell, derived from data from libphonenumber
# http://code.google.com/p/libphonenumber/
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
package Number::Phone::StubCountry::}.$iso_code.q{;
use base qw(Number::Phone::StubCountry);

use strict;
use warnings;
use utf8;
}.
  "our \$VERSION = 1.".join("", (gmtime())[5] + 1900, sprintf('%02d', (gmtime())[4] + 1), map { sprintf('%02d', $_) } (gmtime())[3, 2, 1, 0]).";\n\n";
}

sub formats_for {
  my ($territory, $ccode) = @_;

  return @us_formats if $territory->findvalue('generalDesc/comment()')->value
      =~ /NANPA\s+country\s+-\s+uses\s+US\s+formatting\s+rules/;

  if ($ccode) {
      return @gb_formats if $ccode eq 'GG' || $ccode eq 'IM' || $ccode eq 'JE';
  }

  my @number_formats = $territory->find('availableFormats/numberFormat')->get_nodelist();

  my @formatters = ();
  foreach my $number_format (@number_formats) {
    my $number_format_pattern = ''.$number_format->find('@pattern');
    # only interested in the last one,
    # see https://github.com/DrHyde/perl-modules-Number-Phone/issues/7
    my $leading_digit_pattern = ($number_format->find('leadingDigits')->get_nodelist())[-1];
    my $formatter = ''.$number_format->find('format');

    if($leading_digit_pattern) {
      ($leading_digit_pattern = $leading_digit_pattern->string_value()); # =~ s/\s//g;
      push @formatters, {
        leading_digits => $leading_digit_pattern,
        pattern        => $number_format_pattern
      };
    } else {
      push @formatters, { pattern => $number_format_pattern };
    }
  }
  return @formatters;

}

#!/usr/bin/env perl

use strict;
use warnings;

use DBM::Deep;
use Digest::MD5 'md5_base64';
use File::Find::Rule;
use Spreadsheet::XLSX;
use Text::CSV_XS;

my $csv = Text::CSV_XS->new({
    binary => 1
});

my @telco_length_data = my @geo_prefices = my @free_prefices = my @network_svc_prefices = my @corporate_prefices = my @personal_prefices = my @pager_prefices = my @mobile_prefices = my @special_prefices = my @adult_prefices = my @ip_prefices = my %areanames = my %statuses = ();

open(my $sabc, '<', 'data-files/sabc.txt') || die("Couldn't open sabc.txt: $!\n");
print "Working on sabc.txt\n";
while(my $row = $csv->getline($sabc)) {
    next if($#{$row} == 0 && $row->[0] =~ m{^\d\d/\d\d/\d{4} \d\d:\d\d:\d\d$});
    my @fields = @{$row};
    next if($fields[3] =~ /(unassigned|not to be used|expansion$)/i || $fields[2] eq 'Not Designated');
    if($fields[2] eq 'Designated' && $fields[3] !~ /^Geographic - unassigned/) {
        $areanames{$fields[0]} = $fields[3];
    }
}

foreach my $xlsfile (File::Find::Rule->name('*.xlsx')->in('data-files')) {
    print "Working on $xlsfile\n";
    my $parser   = Spreadsheet::XLSX->new($xlsfile);

    my $worksheet = $parser->{Worksheet}->[0];
    my ( $row_min, $row_max ) = $worksheet->row_range();
    my ( $col_min, $col_max ) = $worksheet->col_range();

    my @rows = ();
    ROW: foreach my $rowindex ($row_min .. $row_max) {
        push @rows, [];
        COL: foreach my $colindex ($col_min .. $col_max) {
            my $cell = $worksheet->get_cell($rowindex, $colindex);
            if(!$cell) { next COL };
            $rows[-1]->[$colindex] = $cell->value();
        }
    }
    if(scalar(@{$rows[-1]}) == 1 && $rows[-1]->[0] =~ m{^\d\d/\d\d/\d\d\d\d \d\d:\d\d:\d\d$}) {
        # get rid of trailing date/time stamp row
        pop(@rows);
    }
    my $count = 0;

    my %header_fields_index_by_name = map { $_ => $count++ } my @header_fields_index_by_column = @{shift(@rows)};
    my @prefix_fields = grep { exists($header_fields_index_by_name{$_}) } (qw(SABC D/DE FG), 'NMS Number Block: Number Block');
    foreach my $row (@rows) {
        my $prefix = join('', map { s/\s//g; $_; }  grep { defined } map { $row->[$_] } @header_fields_index_by_name{@prefix_fields});

        my $format_field = 
            exists($header_fields_index_by_name{'Number Length'})         ? 'Number Length' :
            exists($header_fields_index_by_name{'NumberLengthNonGeo'})    ? 'NumberLengthNonGeo' :
            exists($header_fields_index_by_name{'Non Geo Number Length'}) ? 'Non Geo Number Length' :
            exists($header_fields_index_by_name{'Geographic Number Length'}) ? 'Geographic Number Length' :
            die("Can't find a format field in $xlsfile\n");
        my $telco_field = 
            exists($header_fields_index_by_name{'Communications Provider'}) ? 'Communications Provider' :
            exists($header_fields_index_by_name{'CP Name'})                 ? 'CP Name' :
            die("Can't find a telco field in $xlsfile\n");
        my $status_field = 
            exists($header_fields_index_by_name{'Status'})       ? 'Status' :
            exists($header_fields_index_by_name{'Block Status'}) ? 'Block Status' :
            die("Can't find a status field in $xlsfile\n");

        my($status, $telco, $format) = map {
            $row->[$_]
        } @header_fields_index_by_name{$status_field, $telco_field, $format_field};

        $status ||= '';
        $telco  ||= '';
        $format ||= '';

        # checked on 2021-06-01
        # next check due 2022-06-01 (annually)
        next if(
            $prefix !~ /^11[46]496$/ && # These drama prefixex have status 'Quarantined'
                                        # unlike other drama prefixes which are 'Protected'
            $status !~ /^(Protected|Allocated ?(\(Closed Range\)|for Migration only)?)$/
        );
        $statuses{"$prefix"} = $status;

        if($prefix =~ /^[12]/)                         { push @geo_prefices, $prefix }
         elsif($prefix =~ /^80/)                       { push @free_prefices, $prefix }
         elsif($prefix =~ /^55/)                       { push @corporate_prefices, $prefix }
         elsif($prefix =~ /^56/)                       { push @ip_prefices, $prefix }
         elsif($prefix =~ /^70/)                       { push @personal_prefices, $prefix }
         # NB order is important. 7624 is IOM mobiles except 76242 which is pagers. Apparently.
         elsif($prefix =~ /^7([12345789]|624[013-9])/) { push @mobile_prefices, $prefix }
         elsif($prefix =~ /^76/)                       { push @pager_prefices, $prefix }
         elsif($prefix =~ /^(3|8[47]|9)/)              { push @special_prefices, $prefix }
         ## previously allocated for "internet for schools" and "inbound routing codes" some time
         ## before 30 Sep 2020. This classification may be obsolete for the UK now
         # elsif($prefix =~ /^82[09]/)                   { push @network_svc_prefices, $prefix } # internet for schools
        if($prefix =~ /^9(8|0[89])/) { push @adult_prefices, $prefix }
        push @telco_length_data, [$prefix, $telco, $format];
    }
}

# special numbers allocated for use in drama that don't appear
# in the spreadsheets
push @free_prefices, '8081570';
push @special_prefices, '9098790', '3069990'; 

print "Building telco/length data ...\n";
my %telco_format_cache = ();
my %telco_and_length = ();
foreach my $datum (@telco_length_data) {
    my($prefix, $telco, $format) = @{$datum};

    # if($prefix eq '1442600') {
    #     warn "Correcting OFCOM's broken data for 1442 60 0\n";
    #     warn "  check this and remove the warning if fixed in XLS file (last checked 2017/06/20)\n";
    #     if($format eq '') { $format = '4+6' }
    # }
    if($format eq '') {
        if(    $prefix =~ /^[37]/     ) { $format = '10 digit numbers' }
         elsif($prefix =~ /^2/        ) { $format = '2+8' }
         elsif($prefix =~ /^(1.1|11.)/) { $format = '3+7' }
    }

    if($format eq '(0)+10' || $format =~ /^10 digit number/i) {
        $format = '0+10';
    } elsif($format =~ /^9 +digit number/i) {
        $format = '0+9';
    } elsif($format =~ /^7 digit number/i) {
        $format = '0+7';
    } elsif($format =~ /^Mixed 4\+5 &(amp;)? 4\+6$/) {
        $format = '4+5/6';
    } elsif(
        $format ne '2+8' &&
        $format ne '3+7' &&
        $format ne '4+6' &&
        $format ne '4+5' &&
        $format ne '5+5' &&
        $format ne '5+4' &&
        $format !~ /^Mixed 4\+5 &(amp;)? 4\+6$/
    ) {
        warn "Unknown format: $format (r: $prefix; t: $telco)\n"
            unless($prefix =~ /^[89]/ || $statuses{$prefix} eq 'Protected')
    }

    my $cache_key = md5_base64($telco.'_'.$format);
    $telco_format_cache{$cache_key} = {
        telco => $telco,
        format => $format
    };

    $telco_and_length{$prefix} = $cache_key;
}

print "Creating DBM::Deep file ...\n";
mkdir('share');
unlink('share/Number-Phone-UK-Data.db');
my $dbm = DBM::Deep->new(
    file => 'share/Number-Phone-UK-Data.db',
    data_sector_size => 32,
);

$dbm->{geo_prefices}         = { map { ($_, 1) } @geo_prefices };
$dbm->{network_svc_prefices} = { map { ($_, 1) } @network_svc_prefices };
$dbm->{free_prefices}        = { map { ($_, 1) } @free_prefices };
$dbm->{corporate_prefices}   = { map { ($_, 1) } @corporate_prefices };
$dbm->{personal_prefices}    = { map { ($_, 1) } @personal_prefices };
$dbm->{pager_prefices}       = { map { ($_, 1) } @pager_prefices };
$dbm->{mobile_prefices}      = { map { ($_, 1) } @mobile_prefices };
$dbm->{special_prefices}     = { map { ($_, 1) } @special_prefices };
$dbm->{adult_prefices}       = { map { ($_, 1) } @adult_prefices };
$dbm->{ip_prefices}          = { map { ($_, 1) } @ip_prefices };
$dbm->{areanames}            = { map { s/( National Dialling)//ig; $_; } %areanames };
$dbm->{telco_format} = \%telco_format_cache;
$dbm->{telco_and_length} = \%telco_and_length;
$dbm->{subclass} = {
  # taken from libphonenumber
  # checked on 2021-09-02
  # next check due 2022-10-01 (annually)
  (map { $_ => 'GG' } (
      1481, 7781, 7839, 79111, 79117
  )),
  (map { $_ => 'JE' } (
      1534, 7509, 7829, 7937,
      77003,
      77007,
      77008,
      7797,
  )),
  (map { $_ => 'IM' } (
      1624,
      74576,
      7524,
      76240,
      76241,
      76242,
      76243,
      76244,
      762450,
      762456,
      76246,
      76248,
      76249,
      7924,
      808162,
      8440406, 8440906,
      845624, 870624,
      872299,
      900624, 901624, 906624, 907624,
  )),
};
